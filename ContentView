import SwiftUI

enum Segment: String, CaseIterable {
  case top
  case left
  case right

  var image: Image {
      Image(self.rawValue)
  }
  var next: Segment {
    switch self {
      case .top: return .right
      case .left: return .top
      case .right: return .left
    }
  }
}

struct ContentView: View {
  @ObservedObject var viewModel = ContentViewModel()
  var body: some View {
    VStack {
      ZStack {
        ForEach(Segment.allCasses, id: \.self) {
          segment.image
            .resizable()
            .scaledToFit()
            .modifier(ClipAnimatedShape(segment: segment,
                                        selectedSegment: viewModel.SelectedSegment))
            .onTapGesture {
              withAnimation {
                viewModel.selectedSegment = segment
              }
            }
        }
      } 
      .pading(.top, 15)
      Spacer()
    }
    .ignoreSafeArea()
  }
}

struct ClipAnimatedShape: ViewModifier {
  var segment: Segment
  var selectedSegment: Segment
  

  func body(content: Content) -> some View {
    let scale: CGFloat = segment == selectedSegment ? 1.2 : 1
    let offset: CGFloat = segment == selectedSegment ? UIScreen.main.bounds.width * 0.025 : 0

    switch segment{
      case .top:
        content
          .clipShape(TopShape())
          .contentShape(TopShape())
          .scaleEffect(scale)
          .offset(-offset * 0.2, -offset * 1.3)
          .animation(.linear(duration: 0.15))
      case .left:
        content
          .clipShape(LeftShape())
          .contentShape(LeftShape())
          .scaleEffect(scale)
          .offset(-offset * 4, -offset * 5)
          .animation(.linear(duration: 0.15))
      case .right:
        content
          .clipShape(RightShape())
          .contentShape(RightShape())
          .scaleEffect(scale)
          .offset(offset * 0.07, -offset * 1.2)
          .animation(.linear(duration: 0.15))
    }
  }
}

